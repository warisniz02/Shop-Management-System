//       This is method One which was fail!Now I try  new  one
//  This code I brought from user model


// userSchema.methods.generateAuthToken = async() => {
//     const user  = this  
     
//     const  token = jwt.sign({_id :  user._id.toString(),  Token_Secret_Key})
//        return token
// }




// userSchema.statics.findByCredentials = async(email, password) => {

//     const user = await User.findOne({email})

//     if(!user){
//       return   new Error('Unable to login.Invalid email')
//     }
      

//     const isMatch =  await bcrypt.compare(password, user.password)
//         if(!isMatch){
//             throw new Error('Unable to login!!')
//         }
//         return user

//     }
    
//    const isMatch = bcrypt.compare(password, user.password, (err, result) => {
//     if(err){
//         throw new Error('Invalid password')
//     }
//     result === true
//    } )
//    if(!isMatch){
//       throw new Error('Unable to login!Invalid Password')
//    }
//     return user
    
   
    
        




// // userSchema.pre('save', async function (next)  {
// //     const user = this
// //     if(!user.isModified('password')){
// //         user.password = await bcrypt.hash(user.password, 8)
// //       return user.password
// //     }
// //    return next()
// // })





//             // This code I brought from user rout folder


 
// router.post('/users', async (req, res) => {
//     const user = new User(req.body)
//     try{
//       const {value, error} = valUser.validate(req.body)
//       if(error){
//        return res.json({message : error.details})
//       }
//       const result = await user.save()
//         res.status(201).json(result)
//     }catch(e){
//        res.status(400).json(e)
//        console.log(e)
//     }
//  })
 
 
//  router.post('/users/login', async (req, res) => {
//     try {
//        const user = await User.findByCredentials(req.body.email, req.body.password)
//      res.status(201).json(user)
    
//     } catch (e) {
//        res.status(400).json()
//        console.log(e)
//     }
//  })
 
 
 
//  router.get('/users', async (req, res) => {
//     try {
//        const getUser = await User.find()
//        res.json(getUser)
//     } catch (e) {
//        res.json(e)
//     }
//  });
 
//  router.get('/users/:id', async (req, res) => {
//     try {
 
//        const getUserById = await User.findById(req.params.id)
//        res.json(getUserById)
//     } catch (e) {
//        res.json(e)
//     }
//  })
 
//  // /In this route has some issue tommarow first to fix it
//  router.patch('/users/:id', async (req, res) => {
//     try {
//        const updateUser = await User.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })
//        res.json(updateUser)
//     } catch (e) {
//        res.json(e)
//     }
//  })
 
//  router.delete('/users/:id', async (req, res) => {
//     try {
//        const deleteUser = await User.findByIdAndDelete(req.params.id)
 
//        if (!deleteUser) {
//           return res.status(404).json('User deleted  please try another one')
//        }
//        res.json(deleteUser)
 
//     } catch (e) {
//        res.json(e)
//        console.log(e)
//     }
//  })


// This method also fail so I am going to try next one


// router.post('/register', async(req, res) => {
//     const {value, error} = registerUser.validate(req.body)
 
//     if(error) return res.status(400).json(error.details[0].message)
 
//     // If User already exist
 
//     const userExist = await User.findOne({ email : req.body.email})
 
//     if(userExist) return res.status(400).json('User already exist creat new user for login')
 
 
//     // Hash User password
 
//     const salt = await bcrypt.genSalt(10)
 
//     const hashPassword = await bcrypt.hash(req.body.password, salt)
 
//     // Creat new user
 
//     const user = new User({
//        name : req.body.name,
//        email : req.body.email,
//        password : hashPassword,
       
//     })
 
//  try{
//       const  savedUser = await user.save()
//        res.status(200).json(savedUser)
//     }catch(e){
//        res.status(400).json(e)
//     }
//  });
 
//  router.post('/login', async(req, res) => {
   
//      const { error } = loginUser.validate(req.body)
//  try{
//     if(error) return res.status(400).json(error.details[0].message)
 
//     const user = await User.findOne({email : req.body.email})
 
//     if(!user) res.status(400).json('Email or Password is  wrong')
//        else return res.status(200).json(user)
 
//     const correctValid = await bcrypt.compare(req.body.password, user.password)
    
//     if(!correctValid)  res.status(400).json('Password or Email is wrong')
//      else  return res.status(200).json(correctValid)
//     // Genrate "JWT" token for authentication and authorization
 
//     const token =  jwt.sign({_id : user._id}, process.env.TOKEN_SECRET_KEY)
//       return res.header('auth-token', token).json(token)
//  }catch(e){
//    return  res.status(400).json(e)
//  }
 
//  })
            

// logout request created by sir aqil


// const logoutUser =   async(req, res) => {
//     try {
//         req.user.token = req.user.token

//         token != req.token

//         await req.user.save()

//         return res.status(200).json()
//     } catch (e) {
//         res.status(400).json(e)
//         console.log(e)
//     }
// }





    // This code I brought from middleware folder  

//   verifyToken: async (req, res, next) => {
//     try {
//     const token =
//       req.body.token || req.query.token || req.headers("x-access-token");
//     if (!token) {
//       return res.status(403).json("A token is required for authentication");
//     }
   
//       const decoded = jwt.verify(token, config.JWT_TOKEN_KEY);
//       const user = await User.findOne({_id : decoded.user._id , 'tokens.token' : token})

//       if(!user){
//          throw new Error()
        
//       }
//       req.token = token
//       req.user = user

//       return next();
//     }
//     catch (e){
//       res.status(400).json(e)
//       console.log(e)

//     };


//   }